#!/bin/bash

# Function to install dependencies on macOS using Homebrew
install_macos() {
  echo "Detected macOS. Installing dependencies with Homebrew..."
  which -s brew
  if [[ $? != 0 ]]; then
      # Install Homebrew
      echo "Homebrew not found. Installing Homebrew..."
      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  fi

  # Install dependencies
  brew update
  brew install python3 git curl wget nmap dnsmasq coreutils
  brew install --cask docker
}

# Function to install dependencies on Windows using PowerShell
install_windows() {
  echo "Detected Windows. Installing dependencies with PowerShell..."
  powershell -Command {
    try {
      # Check if Chocolatey is installed
      choco -v
      if ($?) {
        Write-Output "Chocolatey is already installed."
      } else {
        Write-Output "Installing Chocolatey..."
        Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
      }

      # Install dependencies
      choco install -y python git curl wget nmap docker-desktop
    } catch {
      Write-Error "Failed to install dependencies: $_"
      exit 1
    }
  }
}

# Function to install dependencies on Linux
install_linux() {
  echo "Detected Linux. Installing dependencies with apt-get..."
  sudo apt-get update && sudo apt-get install -y \
      sudo \
      python3 \
      python3-pip \
      python3-venv \
      git \
      curl \
      wget \
      nmap \
      dnsutils \
      build-essential \
      libssl-dev \
      zlib1g-dev \
      libbz2-dev \
      libreadline-dev \
      libsqlite3-dev \
      llvm \
      libncurses5-dev \
      xz-utils \
      tk-dev \
      libxml2-dev \
      libxmlsec1-dev \
      libffi-dev \
      liblzma-dev \
      net-tools \
      iputils-ping \
      tcpdump \
      jq \
      tmux \
      gnupg \
      tor \
      docker.io \
      && sudo rm -rf /var/lib/apt/lists/*
}

# Detect operating system and call appropriate function
if [[ "$OSTYPE" == "darwin"* ]]; then
  install_macos
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
  install_linux
elif [[ "$OSTYPE" == "cygwin" ]] || [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "win32" ]]; then
  install_windows
else
  echo "Unsupported OS: $OSTYPE"
  exit 1
fi

# Multi-stage Dockerfile content
cat << 'EOF' > Dockerfile
# Stage 1: Build stage
FROM ubuntu:latest as builder

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PATH=$PATH:/usr/local/go/bin:/opt/metasploit-framework/bin:/root/go/bin

# Update package lists and install essential packages
RUN apt-get update && apt-get install -y \
    sudo \
    python3 \
    python3-pip \
    python3-venv \
    git \
    curl \
    wget \
    nmap \
    dnsutils \
    build-essential \
    libssl-dev \
    zlib1g-dev \
    libbz2-dev \
    libreadline-dev \
    libsqlite3-dev \
    llvm \
    libncurses5-dev \
    xz-utils \
    tk-dev \
    libxml2-dev \
    libxmlsec1-dev \
    libffi-dev \
    liblzma-dev \
    net-tools \
    iputils-ping \
    tcpdump \
    jq \
    tmux \
    gnupg \
    tor \
    proxychains4 \
    vim \
    nano \
    && rm -rf /var/lib/apt/lists/*

# Install Metasploit using the alternative method
RUN curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall && \
    chmod 755 msfinstall && \
    ./msfinstall

# Create necessary directories for Tor with appropriate permissions
RUN mkdir -p /run/tor && \
    chown -R debian-tor:debian-tor /run/tor

# Create a new user with sudo privileges
RUN useradd -m -s /bin/bash pentester && \
    echo 'pentester:pentester' | chpasswd && \
    usermod -aG sudo pentester

# Switch to the new user
USER pentester
WORKDIR /home/pentester

# Set up Metasploit environment
RUN msfdb init

# Switch back to root user for further installations
USER root

# Install Python packages in a virtual environment
RUN python3 -m venv /opt/venv && \
    /opt/venv/bin/pip install --no-cache-dir \
    requests \
    bs4 \
    lxml \
    beautifulsoup4 \
    scapy \
    pwntools \
    impacket

# Install Go for additional tools
RUN wget https://go.dev/dl/go1.21.5.linux-amd64.tar.gz && \
    tar -C /usr/local -xzf go1.21.5.linux-amd64.tar.gz && \
    rm go1.21.5.linux-amd64.tar.gz

# Clone and install Pentester Framework
RUN git clone https://github.com/trustedsec/ptf /opt/ptf && \
    cd /opt/ptf && \
    ./ptf --update-all

# Configure Proxychains to use Tor
RUN echo "strict_chain" > /etc/proxychains4.conf
RUN echo "proxy_dns" >> /etc/proxychains4.conf
RUN echo "tcp_read_time_out 15000" >> /etc/proxychains4.conf
RUN echo "tcp_connect_time_out 8000" >> /etc/proxychains4.conf
RUN echo "[ProxyList]" >> /etc/proxychains4.conf
RUN echo "socks5 127.0.0.1 9050" >> /etc/proxychains4.conf

# Ensure Tor starts automatically
RUN echo "sudo service tor start" >> /home/pentester/.bashrc

# Copy the scripts into the Docker container and set permissions
COPY netflix_vuln_test.sh /home/pentester/netflix_vuln_test.sh
COPY send_to_discord.py /home/pentester/send_to_discord.py
RUN chmod +x /home/pentester/netflix_vuln_test.sh
RUN chmod +x /home/pentester/send_to_discord.py

# Switch back to pentester user
USER pentester
WORKDIR /home/pentester

# Add a final check to ensure critical components are installed
RUN if ! command -v msfconsole > /dev/null; then \
        echo "Metasploit is missing. Installation may have failed."; \
    fi && \
    if ! command -v go > /dev/null; then \
        echo "Go is missing. Installation may have failed."; \
    fi

# Stage 2: Run stage
FROM ubuntu:latest

# Copy the necessary files from the build stage
COPY --from=builder /usr/local /usr/local
COPY --from=builder /home/pentester /home/pentester

# Entrypoint for the container
ENTRYPOINT ["/usr/local/bin/start.sh"]
EOF

# Docker build and run commands
sudo docker build -t pentest_environment .

# Start the idle-check script
sudo nohup /usr/local/bin/idle-check.sh &

echo "Setup complete. Docker environment is ready."
